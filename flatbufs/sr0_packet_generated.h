// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SR0PACKET_GROUNDSTATION_H_
#define FLATBUFFERS_GENERATED_SR0PACKET_GROUNDSTATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "lora_packet_generated.h"

namespace groundstation {

struct SR0PacketData;
struct SR0PacketDataBuilder;

struct SR0PacketData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SR0PacketDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_PACKET_BODY = 6
  };
  const groundstation::PacketHeader *header() const {
    return GetPointer<const groundstation::PacketHeader *>(VT_HEADER);
  }
  const ::flatbuffers::Vector<uint8_t> *packet_body() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_PACKET_BODY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_PACKET_BODY) &&
           verifier.VerifyVector(packet_body()) &&
           verifier.EndTable();
  }
};

struct SR0PacketDataBuilder {
  typedef SR0PacketData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<groundstation::PacketHeader> header) {
    fbb_.AddOffset(SR0PacketData::VT_HEADER, header);
  }
  void add_packet_body(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_body) {
    fbb_.AddOffset(SR0PacketData::VT_PACKET_BODY, packet_body);
  }
  explicit SR0PacketDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SR0PacketData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SR0PacketData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SR0PacketData> CreateSR0PacketData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<groundstation::PacketHeader> header = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_body = 0) {
  SR0PacketDataBuilder builder_(_fbb);
  builder_.add_packet_body(packet_body);
  builder_.add_header(header);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SR0PacketData> CreateSR0PacketDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<groundstation::PacketHeader> header = 0,
    const std::vector<uint8_t> *packet_body = nullptr) {
  auto packet_body__ = packet_body ? _fbb.CreateVector<uint8_t>(*packet_body) : 0;
  return groundstation::CreateSR0PacketData(
      _fbb,
      header,
      packet_body__);
}

inline const groundstation::SR0PacketData *GetSR0PacketData(const void *buf) {
  return ::flatbuffers::GetRoot<groundstation::SR0PacketData>(buf);
}

inline const groundstation::SR0PacketData *GetSizePrefixedSR0PacketData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<groundstation::SR0PacketData>(buf);
}

inline bool VerifySR0PacketDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<groundstation::SR0PacketData>(nullptr);
}

inline bool VerifySizePrefixedSR0PacketDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<groundstation::SR0PacketData>(nullptr);
}

inline void FinishSR0PacketDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::SR0PacketData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSR0PacketDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::SR0PacketData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace groundstation

#endif  // FLATBUFFERS_GENERATED_SR0PACKET_GROUNDSTATION_H_
