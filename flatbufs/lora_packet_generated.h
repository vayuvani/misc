// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LORAPACKET_GROUNDSTATION_H_
#define FLATBUFFERS_GENERATED_LORAPACKET_GROUNDSTATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace groundstation {

struct PacketHeader;
struct PacketHeaderBuilder;

struct LoRaPacket;
struct LoRaPacketBuilder;

struct PacketHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TIMESTAMP = 6,
    VT_PACKET_SIZE = 8,
    VT_PACKET_RX_RSSI = 10,
    VT_PACKET_RX_SNR = 12,
    VT_PACKET_CRC_FLAG = 14,
    VT_PACKET_SEQ_ID = 16,
    VT_PACKET_SAT_NAME = 18,
    VT_PACKET_SAT_FREQ = 20
  };
  uint64_t packet_timestamp() const {
    return GetField<uint64_t>(VT_PACKET_TIMESTAMP, 0);
  }
  uint16_t packet_size() const {
    return GetField<uint16_t>(VT_PACKET_SIZE, 0);
  }
  int8_t packet_rx_rssi() const {
    return GetField<int8_t>(VT_PACKET_RX_RSSI, 0);
  }
  float packet_rx_snr() const {
    return GetField<float>(VT_PACKET_RX_SNR, 0.0f);
  }
  bool packet_crc_flag() const {
    return GetField<uint8_t>(VT_PACKET_CRC_FLAG, 0) != 0;
  }
  const ::flatbuffers::Vector<uint8_t> *packet_seq_id() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_PACKET_SEQ_ID);
  }
  const ::flatbuffers::String *packet_sat_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PACKET_SAT_NAME);
  }
  float packet_sat_freq() const {
    return GetField<float>(VT_PACKET_SAT_FREQ, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PACKET_TIMESTAMP, 8) &&
           VerifyField<uint16_t>(verifier, VT_PACKET_SIZE, 2) &&
           VerifyField<int8_t>(verifier, VT_PACKET_RX_RSSI, 1) &&
           VerifyField<float>(verifier, VT_PACKET_RX_SNR, 4) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_CRC_FLAG, 1) &&
           VerifyOffset(verifier, VT_PACKET_SEQ_ID) &&
           verifier.VerifyVector(packet_seq_id()) &&
           VerifyOffset(verifier, VT_PACKET_SAT_NAME) &&
           verifier.VerifyString(packet_sat_name()) &&
           VerifyField<float>(verifier, VT_PACKET_SAT_FREQ, 4) &&
           verifier.EndTable();
  }
};

struct PacketHeaderBuilder {
  typedef PacketHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_timestamp(uint64_t packet_timestamp) {
    fbb_.AddElement<uint64_t>(PacketHeader::VT_PACKET_TIMESTAMP, packet_timestamp, 0);
  }
  void add_packet_size(uint16_t packet_size) {
    fbb_.AddElement<uint16_t>(PacketHeader::VT_PACKET_SIZE, packet_size, 0);
  }
  void add_packet_rx_rssi(int8_t packet_rx_rssi) {
    fbb_.AddElement<int8_t>(PacketHeader::VT_PACKET_RX_RSSI, packet_rx_rssi, 0);
  }
  void add_packet_rx_snr(float packet_rx_snr) {
    fbb_.AddElement<float>(PacketHeader::VT_PACKET_RX_SNR, packet_rx_snr, 0.0f);
  }
  void add_packet_crc_flag(bool packet_crc_flag) {
    fbb_.AddElement<uint8_t>(PacketHeader::VT_PACKET_CRC_FLAG, static_cast<uint8_t>(packet_crc_flag), 0);
  }
  void add_packet_seq_id(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_seq_id) {
    fbb_.AddOffset(PacketHeader::VT_PACKET_SEQ_ID, packet_seq_id);
  }
  void add_packet_sat_name(::flatbuffers::Offset<::flatbuffers::String> packet_sat_name) {
    fbb_.AddOffset(PacketHeader::VT_PACKET_SAT_NAME, packet_sat_name);
  }
  void add_packet_sat_freq(float packet_sat_freq) {
    fbb_.AddElement<float>(PacketHeader::VT_PACKET_SAT_FREQ, packet_sat_freq, 0.0f);
  }
  explicit PacketHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PacketHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PacketHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PacketHeader> CreatePacketHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t packet_timestamp = 0,
    uint16_t packet_size = 0,
    int8_t packet_rx_rssi = 0,
    float packet_rx_snr = 0.0f,
    bool packet_crc_flag = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_seq_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> packet_sat_name = 0,
    float packet_sat_freq = 0.0f) {
  PacketHeaderBuilder builder_(_fbb);
  builder_.add_packet_timestamp(packet_timestamp);
  builder_.add_packet_sat_freq(packet_sat_freq);
  builder_.add_packet_sat_name(packet_sat_name);
  builder_.add_packet_seq_id(packet_seq_id);
  builder_.add_packet_rx_snr(packet_rx_snr);
  builder_.add_packet_size(packet_size);
  builder_.add_packet_crc_flag(packet_crc_flag);
  builder_.add_packet_rx_rssi(packet_rx_rssi);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PacketHeader> CreatePacketHeaderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t packet_timestamp = 0,
    uint16_t packet_size = 0,
    int8_t packet_rx_rssi = 0,
    float packet_rx_snr = 0.0f,
    bool packet_crc_flag = false,
    const std::vector<uint8_t> *packet_seq_id = nullptr,
    const char *packet_sat_name = nullptr,
    float packet_sat_freq = 0.0f) {
  auto packet_seq_id__ = packet_seq_id ? _fbb.CreateVector<uint8_t>(*packet_seq_id) : 0;
  auto packet_sat_name__ = packet_sat_name ? _fbb.CreateString(packet_sat_name) : 0;
  return groundstation::CreatePacketHeader(
      _fbb,
      packet_timestamp,
      packet_size,
      packet_rx_rssi,
      packet_rx_snr,
      packet_crc_flag,
      packet_seq_id__,
      packet_sat_name__,
      packet_sat_freq);
}

struct LoRaPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoRaPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_HEADER = 4,
    VT_PACKET_BODY = 6
  };
  const groundstation::PacketHeader *packet_header() const {
    return GetPointer<const groundstation::PacketHeader *>(VT_PACKET_HEADER);
  }
  const ::flatbuffers::Vector<uint8_t> *packet_body() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_PACKET_BODY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PACKET_HEADER) &&
           verifier.VerifyTable(packet_header()) &&
           VerifyOffset(verifier, VT_PACKET_BODY) &&
           verifier.VerifyVector(packet_body()) &&
           verifier.EndTable();
  }
};

struct LoRaPacketBuilder {
  typedef LoRaPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_header(::flatbuffers::Offset<groundstation::PacketHeader> packet_header) {
    fbb_.AddOffset(LoRaPacket::VT_PACKET_HEADER, packet_header);
  }
  void add_packet_body(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_body) {
    fbb_.AddOffset(LoRaPacket::VT_PACKET_BODY, packet_body);
  }
  explicit LoRaPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoRaPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoRaPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoRaPacket> CreateLoRaPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<groundstation::PacketHeader> packet_header = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> packet_body = 0) {
  LoRaPacketBuilder builder_(_fbb);
  builder_.add_packet_body(packet_body);
  builder_.add_packet_header(packet_header);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoRaPacket> CreateLoRaPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<groundstation::PacketHeader> packet_header = 0,
    const std::vector<uint8_t> *packet_body = nullptr) {
  auto packet_body__ = packet_body ? _fbb.CreateVector<uint8_t>(*packet_body) : 0;
  return groundstation::CreateLoRaPacket(
      _fbb,
      packet_header,
      packet_body__);
}

inline const groundstation::LoRaPacket *GetLoRaPacket(const void *buf) {
  return ::flatbuffers::GetRoot<groundstation::LoRaPacket>(buf);
}

inline const groundstation::LoRaPacket *GetSizePrefixedLoRaPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<groundstation::LoRaPacket>(buf);
}

inline bool VerifyLoRaPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<groundstation::LoRaPacket>(nullptr);
}

inline bool VerifySizePrefixedLoRaPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<groundstation::LoRaPacket>(nullptr);
}

inline void FinishLoRaPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::LoRaPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoRaPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::LoRaPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace groundstation

#endif  // FLATBUFFERS_GENERATED_LORAPACKET_GROUNDSTATION_H_
