// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEALTHSTATUS_GROUNDSTATION_H_
#define FLATBUFFERS_GENERATED_HEALTHSTATUS_GROUNDSTATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace groundstation {

struct GsHealthData;
struct GsHealthDataBuilder;

enum RadioState : int8_t {
  RadioState_IDLE = 0,
  RadioState_TRANSMITTING = 1,
  RadioState_RECEIVING = 2,
  RadioState_COOLDOWN = 3,
  RadioState_MIN = RadioState_IDLE,
  RadioState_MAX = RadioState_COOLDOWN
};

inline const RadioState (&EnumValuesRadioState())[4] {
  static const RadioState values[] = {
    RadioState_IDLE,
    RadioState_TRANSMITTING,
    RadioState_RECEIVING,
    RadioState_COOLDOWN
  };
  return values;
}

inline const char * const *EnumNamesRadioState() {
  static const char * const names[5] = {
    "IDLE",
    "TRANSMITTING",
    "RECEIVING",
    "COOLDOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameRadioState(RadioState e) {
  if (::flatbuffers::IsOutRange(e, RadioState_IDLE, RadioState_COOLDOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRadioState()[index];
}

struct GsHealthData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GsHealthDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BATTERY_CONNECTED = 4,
    VT_BATTERY_REMAINING = 6,
    VT_BATTERY_CAPACITY = 8,
    VT_BATTERY_VOLTAGE = 10,
    VT_WIFI_RSSI = 12,
    VT_WIFI_NAME = 14,
    VT_LORA_TX_ENABLED = 16,
    VT_LORA_RX_ENABLED = 18,
    VT_LORA_LAST_PACKET_SIZE = 20,
    VT_LORA_LAST_PACKET_TX_TIMESTAMP = 22,
    VT_LORA_LAST_PACKET_RX_TIMESTAMP = 24,
    VT_LORA_LAST_PACKET_RX_RSSI = 26,
    VT_LORA_LAST_PACKET_RX_SNR = 28,
    VT_LORA_STATUS = 30
  };
  bool battery_connected() const {
    return GetField<uint8_t>(VT_BATTERY_CONNECTED, 0) != 0;
  }
  uint16_t battery_remaining() const {
    return GetField<uint16_t>(VT_BATTERY_REMAINING, 0);
  }
  uint16_t battery_capacity() const {
    return GetField<uint16_t>(VT_BATTERY_CAPACITY, 0);
  }
  float battery_voltage() const {
    return GetField<float>(VT_BATTERY_VOLTAGE, 0.0f);
  }
  int8_t wifi_rssi() const {
    return GetField<int8_t>(VT_WIFI_RSSI, 0);
  }
  const ::flatbuffers::String *wifi_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WIFI_NAME);
  }
  bool lora_tx_enabled() const {
    return GetField<uint8_t>(VT_LORA_TX_ENABLED, 0) != 0;
  }
  bool lora_rx_enabled() const {
    return GetField<uint8_t>(VT_LORA_RX_ENABLED, 0) != 0;
  }
  uint8_t lora_last_packet_size() const {
    return GetField<uint8_t>(VT_LORA_LAST_PACKET_SIZE, 0);
  }
  uint64_t lora_last_packet_tx_timestamp() const {
    return GetField<uint64_t>(VT_LORA_LAST_PACKET_TX_TIMESTAMP, 0);
  }
  uint64_t lora_last_packet_rx_timestamp() const {
    return GetField<uint64_t>(VT_LORA_LAST_PACKET_RX_TIMESTAMP, 0);
  }
  int8_t lora_last_packet_rx_rssi() const {
    return GetField<int8_t>(VT_LORA_LAST_PACKET_RX_RSSI, 0);
  }
  float lora_last_packet_rx_snr() const {
    return GetField<float>(VT_LORA_LAST_PACKET_RX_SNR, 0.0f);
  }
  groundstation::RadioState lora_status() const {
    return static_cast<groundstation::RadioState>(GetField<int8_t>(VT_LORA_STATUS, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BATTERY_CONNECTED, 1) &&
           VerifyField<uint16_t>(verifier, VT_BATTERY_REMAINING, 2) &&
           VerifyField<uint16_t>(verifier, VT_BATTERY_CAPACITY, 2) &&
           VerifyField<float>(verifier, VT_BATTERY_VOLTAGE, 4) &&
           VerifyField<int8_t>(verifier, VT_WIFI_RSSI, 1) &&
           VerifyOffset(verifier, VT_WIFI_NAME) &&
           verifier.VerifyString(wifi_name()) &&
           VerifyField<uint8_t>(verifier, VT_LORA_TX_ENABLED, 1) &&
           VerifyField<uint8_t>(verifier, VT_LORA_RX_ENABLED, 1) &&
           VerifyField<uint8_t>(verifier, VT_LORA_LAST_PACKET_SIZE, 1) &&
           VerifyField<uint64_t>(verifier, VT_LORA_LAST_PACKET_TX_TIMESTAMP, 8) &&
           VerifyField<uint64_t>(verifier, VT_LORA_LAST_PACKET_RX_TIMESTAMP, 8) &&
           VerifyField<int8_t>(verifier, VT_LORA_LAST_PACKET_RX_RSSI, 1) &&
           VerifyField<float>(verifier, VT_LORA_LAST_PACKET_RX_SNR, 4) &&
           VerifyField<int8_t>(verifier, VT_LORA_STATUS, 1) &&
           verifier.EndTable();
  }
};

struct GsHealthDataBuilder {
  typedef GsHealthData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_battery_connected(bool battery_connected) {
    fbb_.AddElement<uint8_t>(GsHealthData::VT_BATTERY_CONNECTED, static_cast<uint8_t>(battery_connected), 0);
  }
  void add_battery_remaining(uint16_t battery_remaining) {
    fbb_.AddElement<uint16_t>(GsHealthData::VT_BATTERY_REMAINING, battery_remaining, 0);
  }
  void add_battery_capacity(uint16_t battery_capacity) {
    fbb_.AddElement<uint16_t>(GsHealthData::VT_BATTERY_CAPACITY, battery_capacity, 0);
  }
  void add_battery_voltage(float battery_voltage) {
    fbb_.AddElement<float>(GsHealthData::VT_BATTERY_VOLTAGE, battery_voltage, 0.0f);
  }
  void add_wifi_rssi(int8_t wifi_rssi) {
    fbb_.AddElement<int8_t>(GsHealthData::VT_WIFI_RSSI, wifi_rssi, 0);
  }
  void add_wifi_name(::flatbuffers::Offset<::flatbuffers::String> wifi_name) {
    fbb_.AddOffset(GsHealthData::VT_WIFI_NAME, wifi_name);
  }
  void add_lora_tx_enabled(bool lora_tx_enabled) {
    fbb_.AddElement<uint8_t>(GsHealthData::VT_LORA_TX_ENABLED, static_cast<uint8_t>(lora_tx_enabled), 0);
  }
  void add_lora_rx_enabled(bool lora_rx_enabled) {
    fbb_.AddElement<uint8_t>(GsHealthData::VT_LORA_RX_ENABLED, static_cast<uint8_t>(lora_rx_enabled), 0);
  }
  void add_lora_last_packet_size(uint8_t lora_last_packet_size) {
    fbb_.AddElement<uint8_t>(GsHealthData::VT_LORA_LAST_PACKET_SIZE, lora_last_packet_size, 0);
  }
  void add_lora_last_packet_tx_timestamp(uint64_t lora_last_packet_tx_timestamp) {
    fbb_.AddElement<uint64_t>(GsHealthData::VT_LORA_LAST_PACKET_TX_TIMESTAMP, lora_last_packet_tx_timestamp, 0);
  }
  void add_lora_last_packet_rx_timestamp(uint64_t lora_last_packet_rx_timestamp) {
    fbb_.AddElement<uint64_t>(GsHealthData::VT_LORA_LAST_PACKET_RX_TIMESTAMP, lora_last_packet_rx_timestamp, 0);
  }
  void add_lora_last_packet_rx_rssi(int8_t lora_last_packet_rx_rssi) {
    fbb_.AddElement<int8_t>(GsHealthData::VT_LORA_LAST_PACKET_RX_RSSI, lora_last_packet_rx_rssi, 0);
  }
  void add_lora_last_packet_rx_snr(float lora_last_packet_rx_snr) {
    fbb_.AddElement<float>(GsHealthData::VT_LORA_LAST_PACKET_RX_SNR, lora_last_packet_rx_snr, 0.0f);
  }
  void add_lora_status(groundstation::RadioState lora_status) {
    fbb_.AddElement<int8_t>(GsHealthData::VT_LORA_STATUS, static_cast<int8_t>(lora_status), 0);
  }
  explicit GsHealthDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GsHealthData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GsHealthData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GsHealthData> CreateGsHealthData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool battery_connected = false,
    uint16_t battery_remaining = 0,
    uint16_t battery_capacity = 0,
    float battery_voltage = 0.0f,
    int8_t wifi_rssi = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wifi_name = 0,
    bool lora_tx_enabled = false,
    bool lora_rx_enabled = false,
    uint8_t lora_last_packet_size = 0,
    uint64_t lora_last_packet_tx_timestamp = 0,
    uint64_t lora_last_packet_rx_timestamp = 0,
    int8_t lora_last_packet_rx_rssi = 0,
    float lora_last_packet_rx_snr = 0.0f,
    groundstation::RadioState lora_status = groundstation::RadioState_IDLE) {
  GsHealthDataBuilder builder_(_fbb);
  builder_.add_lora_last_packet_rx_timestamp(lora_last_packet_rx_timestamp);
  builder_.add_lora_last_packet_tx_timestamp(lora_last_packet_tx_timestamp);
  builder_.add_lora_last_packet_rx_snr(lora_last_packet_rx_snr);
  builder_.add_wifi_name(wifi_name);
  builder_.add_battery_voltage(battery_voltage);
  builder_.add_battery_capacity(battery_capacity);
  builder_.add_battery_remaining(battery_remaining);
  builder_.add_lora_status(lora_status);
  builder_.add_lora_last_packet_rx_rssi(lora_last_packet_rx_rssi);
  builder_.add_lora_last_packet_size(lora_last_packet_size);
  builder_.add_lora_rx_enabled(lora_rx_enabled);
  builder_.add_lora_tx_enabled(lora_tx_enabled);
  builder_.add_wifi_rssi(wifi_rssi);
  builder_.add_battery_connected(battery_connected);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GsHealthData> CreateGsHealthDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool battery_connected = false,
    uint16_t battery_remaining = 0,
    uint16_t battery_capacity = 0,
    float battery_voltage = 0.0f,
    int8_t wifi_rssi = 0,
    const char *wifi_name = nullptr,
    bool lora_tx_enabled = false,
    bool lora_rx_enabled = false,
    uint8_t lora_last_packet_size = 0,
    uint64_t lora_last_packet_tx_timestamp = 0,
    uint64_t lora_last_packet_rx_timestamp = 0,
    int8_t lora_last_packet_rx_rssi = 0,
    float lora_last_packet_rx_snr = 0.0f,
    groundstation::RadioState lora_status = groundstation::RadioState_IDLE) {
  auto wifi_name__ = wifi_name ? _fbb.CreateString(wifi_name) : 0;
  return groundstation::CreateGsHealthData(
      _fbb,
      battery_connected,
      battery_remaining,
      battery_capacity,
      battery_voltage,
      wifi_rssi,
      wifi_name__,
      lora_tx_enabled,
      lora_rx_enabled,
      lora_last_packet_size,
      lora_last_packet_tx_timestamp,
      lora_last_packet_rx_timestamp,
      lora_last_packet_rx_rssi,
      lora_last_packet_rx_snr,
      lora_status);
}

inline const groundstation::GsHealthData *GetGsHealthData(const void *buf) {
  return ::flatbuffers::GetRoot<groundstation::GsHealthData>(buf);
}

inline const groundstation::GsHealthData *GetSizePrefixedGsHealthData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<groundstation::GsHealthData>(buf);
}

inline bool VerifyGsHealthDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<groundstation::GsHealthData>(nullptr);
}

inline bool VerifySizePrefixedGsHealthDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<groundstation::GsHealthData>(nullptr);
}

inline void FinishGsHealthDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::GsHealthData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGsHealthDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<groundstation::GsHealthData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace groundstation

#endif  // FLATBUFFERS_GENERATED_HEALTHSTATUS_GROUNDSTATION_H_
