// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package groundstation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoRaConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsLoRaConfig(buf []byte, offset flatbuffers.UOffsetT) *LoRaConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoRaConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishLoRaConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLoRaConfig(buf []byte, offset flatbuffers.UOffsetT) *LoRaConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LoRaConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLoRaConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LoRaConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoRaConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoRaConfig) Freq() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 434.0
}

func (rcv *LoRaConfig) MutateFreq(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *LoRaConfig) Bandwidth() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 125.0
}

func (rcv *LoRaConfig) MutateBandwidth(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *LoRaConfig) SpreadingFactor() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 7
}

func (rcv *LoRaConfig) MutateSpreadingFactor(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *LoRaConfig) CodingRate() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 6
}

func (rcv *LoRaConfig) MutateCodingRate(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *LoRaConfig) PreambleLength() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 8
}

func (rcv *LoRaConfig) MutatePreambleLength(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *LoRaConfig) SyncWord() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 18
}

func (rcv *LoRaConfig) MutateSyncWord(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *LoRaConfig) Power() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 8.0
}

func (rcv *LoRaConfig) MutatePower(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func LoRaConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LoRaConfigAddFreq(builder *flatbuffers.Builder, freq float32) {
	builder.PrependFloat32Slot(0, freq, 434.0)
}
func LoRaConfigAddBandwidth(builder *flatbuffers.Builder, bandwidth float32) {
	builder.PrependFloat32Slot(1, bandwidth, 125.0)
}
func LoRaConfigAddSpreadingFactor(builder *flatbuffers.Builder, spreadingFactor byte) {
	builder.PrependByteSlot(2, spreadingFactor, 7)
}
func LoRaConfigAddCodingRate(builder *flatbuffers.Builder, codingRate byte) {
	builder.PrependByteSlot(3, codingRate, 6)
}
func LoRaConfigAddPreambleLength(builder *flatbuffers.Builder, preambleLength byte) {
	builder.PrependByteSlot(4, preambleLength, 8)
}
func LoRaConfigAddSyncWord(builder *flatbuffers.Builder, syncWord byte) {
	builder.PrependByteSlot(5, syncWord, 18)
}
func LoRaConfigAddPower(builder *flatbuffers.Builder, power float32) {
	builder.PrependFloat32Slot(6, power, 8.0)
}
func LoRaConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
