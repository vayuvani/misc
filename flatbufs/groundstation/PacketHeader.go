// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package groundstation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PacketHeader struct {
	_tab flatbuffers.Table
}

func GetRootAsPacketHeader(buf []byte, offset flatbuffers.UOffsetT) *PacketHeader {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PacketHeader{}
	x.Init(buf, n+offset)
	return x
}

func FinishPacketHeaderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPacketHeader(buf []byte, offset flatbuffers.UOffsetT) *PacketHeader {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PacketHeader{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPacketHeaderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PacketHeader) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PacketHeader) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PacketHeader) PacketTimestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PacketHeader) MutatePacketTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *PacketHeader) PacketSize() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PacketHeader) MutatePacketSize(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *PacketHeader) PacketRxRssi() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PacketHeader) MutatePacketRxRssi(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *PacketHeader) PacketRxSnr() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PacketHeader) MutatePacketRxSnr(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *PacketHeader) PacketCrcFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PacketHeader) MutatePacketCrcFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *PacketHeader) PacketSeqId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PacketHeader) PacketSeqIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PacketHeader) PacketSeqIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PacketHeader) MutatePacketSeqId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *PacketHeader) PacketSatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PacketHeader) PacketSatFreq() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PacketHeader) MutatePacketSatFreq(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

func PacketHeaderStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func PacketHeaderAddPacketTimestamp(builder *flatbuffers.Builder, packetTimestamp uint64) {
	builder.PrependUint64Slot(1, packetTimestamp, 0)
}
func PacketHeaderAddPacketSize(builder *flatbuffers.Builder, packetSize uint16) {
	builder.PrependUint16Slot(2, packetSize, 0)
}
func PacketHeaderAddPacketRxRssi(builder *flatbuffers.Builder, packetRxRssi int8) {
	builder.PrependInt8Slot(3, packetRxRssi, 0)
}
func PacketHeaderAddPacketRxSnr(builder *flatbuffers.Builder, packetRxSnr float32) {
	builder.PrependFloat32Slot(4, packetRxSnr, 0.0)
}
func PacketHeaderAddPacketCrcFlag(builder *flatbuffers.Builder, packetCrcFlag bool) {
	builder.PrependBoolSlot(5, packetCrcFlag, false)
}
func PacketHeaderAddPacketSeqId(builder *flatbuffers.Builder, packetSeqId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(packetSeqId), 0)
}
func PacketHeaderStartPacketSeqIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PacketHeaderAddPacketSatName(builder *flatbuffers.Builder, packetSatName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(packetSatName), 0)
}
func PacketHeaderAddPacketSatFreq(builder *flatbuffers.Builder, packetSatFreq float32) {
	builder.PrependFloat32Slot(8, packetSatFreq, 0.0)
}
func PacketHeaderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
