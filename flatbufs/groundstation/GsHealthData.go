// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package groundstation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GsHealthData struct {
	_tab flatbuffers.Table
}

func GetRootAsGsHealthData(buf []byte, offset flatbuffers.UOffsetT) *GsHealthData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GsHealthData{}
	x.Init(buf, n+offset)
	return x
}

func FinishGsHealthDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGsHealthData(buf []byte, offset flatbuffers.UOffsetT) *GsHealthData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GsHealthData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGsHealthDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GsHealthData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GsHealthData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GsHealthData) BatteryConnected() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GsHealthData) MutateBatteryConnected(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *GsHealthData) BatteryRemaining() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateBatteryRemaining(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *GsHealthData) BatteryCapacity() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateBatteryCapacity(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *GsHealthData) BatteryVoltage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GsHealthData) MutateBatteryVoltage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *GsHealthData) WifiRssi() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateWifiRssi(n int8) bool {
	return rcv._tab.MutateInt8Slot(12, n)
}

func (rcv *GsHealthData) WifiName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GsHealthData) LoraTxEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GsHealthData) MutateLoraTxEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *GsHealthData) LoraRxEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GsHealthData) MutateLoraRxEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *GsHealthData) LoraLastPacketSize() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateLoraLastPacketSize(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *GsHealthData) LoraLastPacketTxTimestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateLoraLastPacketTxTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func (rcv *GsHealthData) LoraLastPacketRxTimestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateLoraLastPacketRxTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(24, n)
}

func (rcv *GsHealthData) LoraLastPacketRxRssi() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GsHealthData) MutateLoraLastPacketRxRssi(n int8) bool {
	return rcv._tab.MutateInt8Slot(26, n)
}

func (rcv *GsHealthData) LoraLastPacketRxSnr() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GsHealthData) MutateLoraLastPacketRxSnr(n float32) bool {
	return rcv._tab.MutateFloat32Slot(28, n)
}

func (rcv *GsHealthData) LoraStatus() RadioState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return RadioState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GsHealthData) MutateLoraStatus(n RadioState) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

func GsHealthDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func GsHealthDataAddBatteryConnected(builder *flatbuffers.Builder, batteryConnected bool) {
	builder.PrependBoolSlot(0, batteryConnected, false)
}
func GsHealthDataAddBatteryRemaining(builder *flatbuffers.Builder, batteryRemaining uint16) {
	builder.PrependUint16Slot(1, batteryRemaining, 0)
}
func GsHealthDataAddBatteryCapacity(builder *flatbuffers.Builder, batteryCapacity uint16) {
	builder.PrependUint16Slot(2, batteryCapacity, 0)
}
func GsHealthDataAddBatteryVoltage(builder *flatbuffers.Builder, batteryVoltage float32) {
	builder.PrependFloat32Slot(3, batteryVoltage, 0.0)
}
func GsHealthDataAddWifiRssi(builder *flatbuffers.Builder, wifiRssi int8) {
	builder.PrependInt8Slot(4, wifiRssi, 0)
}
func GsHealthDataAddWifiName(builder *flatbuffers.Builder, wifiName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(wifiName), 0)
}
func GsHealthDataAddLoraTxEnabled(builder *flatbuffers.Builder, loraTxEnabled bool) {
	builder.PrependBoolSlot(6, loraTxEnabled, false)
}
func GsHealthDataAddLoraRxEnabled(builder *flatbuffers.Builder, loraRxEnabled bool) {
	builder.PrependBoolSlot(7, loraRxEnabled, false)
}
func GsHealthDataAddLoraLastPacketSize(builder *flatbuffers.Builder, loraLastPacketSize byte) {
	builder.PrependByteSlot(8, loraLastPacketSize, 0)
}
func GsHealthDataAddLoraLastPacketTxTimestamp(builder *flatbuffers.Builder, loraLastPacketTxTimestamp uint64) {
	builder.PrependUint64Slot(9, loraLastPacketTxTimestamp, 0)
}
func GsHealthDataAddLoraLastPacketRxTimestamp(builder *flatbuffers.Builder, loraLastPacketRxTimestamp uint64) {
	builder.PrependUint64Slot(10, loraLastPacketRxTimestamp, 0)
}
func GsHealthDataAddLoraLastPacketRxRssi(builder *flatbuffers.Builder, loraLastPacketRxRssi int8) {
	builder.PrependInt8Slot(11, loraLastPacketRxRssi, 0)
}
func GsHealthDataAddLoraLastPacketRxSnr(builder *flatbuffers.Builder, loraLastPacketRxSnr float32) {
	builder.PrependFloat32Slot(12, loraLastPacketRxSnr, 0.0)
}
func GsHealthDataAddLoraStatus(builder *flatbuffers.Builder, loraStatus RadioState) {
	builder.PrependInt8Slot(13, int8(loraStatus), 0)
}
func GsHealthDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
