// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package groundstation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoRaSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsLoRaSettings(buf []byte, offset flatbuffers.UOffsetT) *LoRaSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoRaSettings{}
	x.Init(buf, n+offset)
	return x
}

func FinishLoRaSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLoRaSettings(buf []byte, offset flatbuffers.UOffsetT) *LoRaSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LoRaSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLoRaSettingsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LoRaSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoRaSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LoRaSettings) SatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoRaSettings) Config(obj *LoRaConfig) *LoRaConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LoRaConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoRaSettings) TxPermitted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *LoRaSettings) MutateTxPermitted(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *LoRaSettings) TxTransmissionDelay() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 1000
}

func (rcv *LoRaSettings) MutateTxTransmissionDelay(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *LoRaSettings) RxPermitted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LoRaSettings) MutateRxPermitted(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *LoRaSettings) LastChangedTimestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoRaSettings) MutateLastChangedTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *LoRaSettings) EnableLiveLogs() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *LoRaSettings) MutateEnableLiveLogs(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func LoRaSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LoRaSettingsAddSatName(builder *flatbuffers.Builder, satName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(satName), 0)
}
func LoRaSettingsAddConfig(builder *flatbuffers.Builder, config flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(config), 0)
}
func LoRaSettingsAddTxPermitted(builder *flatbuffers.Builder, txPermitted bool) {
	builder.PrependBoolSlot(2, txPermitted, true)
}
func LoRaSettingsAddTxTransmissionDelay(builder *flatbuffers.Builder, txTransmissionDelay uint64) {
	builder.PrependUint64Slot(3, txTransmissionDelay, 1000)
}
func LoRaSettingsAddRxPermitted(builder *flatbuffers.Builder, rxPermitted bool) {
	builder.PrependBoolSlot(4, rxPermitted, false)
}
func LoRaSettingsAddLastChangedTimestamp(builder *flatbuffers.Builder, lastChangedTimestamp uint64) {
	builder.PrependUint64Slot(5, lastChangedTimestamp, 0)
}
func LoRaSettingsAddEnableLiveLogs(builder *flatbuffers.Builder, enableLiveLogs bool) {
	builder.PrependBoolSlot(6, enableLiveLogs, true)
}
func LoRaSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
